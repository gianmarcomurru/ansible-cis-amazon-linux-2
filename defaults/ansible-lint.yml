---
# .ansible-lint

profile: production # min, basic, moderate,safety, shared, production

# Allows dumping of results in SARIF format
# sarif_file: result.sarif

# exclude_paths included in this file are parsed relative to this file's location
# and not relative to the CWD of execution. CLI arguments passed to the --exclude
# option are parsed relative to the CWD of execution.
exclude_paths:
  - .github

# parseable: true
# quiet: true
# strict: true
# verbosity: 1

# Enable checking of loop variable prefixes in roles
# loop_var_prefix: ^(__|{role}_)

# Enforce variable names to follow pattern below, in addition to Ansible own
# requirements, like avoiding python identifiers. To disable add `var-naming`
# to skip_list.
var_naming_pattern: ^[a-z0-9_][a-z0-9_]*$

use_default_rules: true
# Load custom rules from this specific folder
# rulesdir:
#   - ./roles
#   - ./defaults
#   - ./handlers

# Ansible-lint is able to recognize and load skip rules stored inside
# `.ansible-lint-ignore` files. To skip a rule just enter filename and tag,
# like "playbook.yml package-latest" on a new line. Optionally you can add
# comments after the tag, prefixed by "#". We discourage the use of skip_list
# below because that will hide violations from the output. When putting ignores
# inside the ignore file, they are marked as ignored, but still visible, making
# it easier to address later.
skip_list:
  - skip_ansible_lint
  - role-name
  - ignore-errors
  - no-changed-when
  - yaml[truthy]
  - name[missing]
  # - command-instead-of-shell
  # # used because some command are not available as modules
  # # (e.g. `rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'`)
  # - command-instead-of-module
  # - loop-var-prefix[missing]

# Ansible-lint does not automatically load rules that have the 'opt-in' tag.
# You must enable opt-in rules by listing each rule 'id' below.
# enable_list:
#   - role-name
#   - args
#   - empty-string-compare # opt-in
#   - no-log-password # opt-in
#   - no-same-owner # opt-in
#   - name[prefix] # opt-in
#   # add yaml here if you want to avoid ignoring yaml checks when yamllint
#   # library is missing. Normally its absence just skips using that rule.
#   - yaml
# # Report only a subset of tags and fully ignore any others
# # tags:
#   - jinja[spacing]

# Ansible-lint does not fail on warnings from the rules or tags listed below
warn_list:
  - ignore_failures_on_lint
  - jinja

# Some rules can transform files to fix (or make it easier to fix) identified
# errors. `ansible-lint --write` will reformat YAML files and run these transforms.
# By default it will run all transforms (effectively `write_list: ["all"]`).
# You can disable running transforms by setting `write_list: ["none"]`.
# Or only enable a subset of rule transforms by listing rules/tags here.
# write_list:
#   - jinja[spacing]

# Offline mode disables installation of requirements.yml and schema refreshing
offline: true

# Return success if number of violations compared with previous git
# commit has not increased. This feature works only in git
# repositories.
progressive: false

# Define required Ansible's variables to satisfy syntax check
# extra_vars:
#   foo: bar
#   multiline_string_variable: |
#     line1
#     line2
#   complex_variable: ":{;\t$()"

# Uncomment to enforce action validation with tasks, usually is not
# needed as Ansible syntax check also covers it.
# skip_action_validation: false

# List of additional kind:pattern to be added at the top of the default
# match list, first match determines the file kind.
kinds:
  # - playbook: "**/examples/*.{yml,yaml}"
  # - galaxy: "**/folder/galaxy.yml"
  - tasks: "**/tasks/*.yml"
  - vars: ./defaults/vars.yml
  # - ansible.builtin.meta: "**/meta/main.yml"
  - yaml: ./main.yaml
  - tasks: ./defaults/handlers.yml

# List of additional collections to allow in only-builtins rule.
# only_builtins_allow_collections:
#   - example_ns.example_collection

# List of additions modules to allow in only-builtins rule.
# only_builtins_allow_modules:
#   - example_module

# Allow setting custom prefix for name[prefix] rule
task_name_prefix: "{stem} | "
